AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Original ECS Service in ap-southeast-1'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the ECS service will be deployed

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The first public subnet ID for the ALB and ECS tasks

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The second public subnet ID for the ALB and ECS tasks

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: original-stack-cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: original-stack-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: original-stack-container
          Image: public.ecr.aws/r6u4x6s4/honeypot:v2-arm64-latest
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: original-stack-service
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: original-stack-container
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroup

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: original-stack-container-sg
      GroupDescription: Security group for Original container
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: original-stack-alb-sg
      GroupDescription: Security group for Original ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PublicAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: original-stack-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: original-stack-tg
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref PublicAlb
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  AlbDnsName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt PublicAlb.DNSName
  
  AlbUrl:
    Description: URL of the Application Load Balancer
    Value: !Sub http://${PublicAlb.DNSName}

  TargetGroupArn:
    Description: ARN of the Target Group
    Value: !Ref TargetGroup

  TargetGroupConsoleLink:
    Description: Link to the Target Group in AWS Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#TargetGroup:targetGroupArn=${TargetGroup}"

  AlbConsoleLink:
    Description: Link to the ALB in AWS Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#LoadBalancers:search=${PublicAlb.LoadBalancerName}"
