AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS deployment for the workshop application'

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Workshop VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WorkshopCluster

  # ECS Task Definitions
  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: frontend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: frontend
          Image: public.ecr.aws/u2g6w7p2/eks-workshop-demo/frontend_node:2.0
          PortMappings:
            - ContainerPort: 9000
          Environment:
            - Name: BASE_URL
              Value: !Sub "http://${ALB.DNSName}:5000/products/"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:9000/ping || exit 1
            Interval: 10
            Timeout: 1
            Retries: 3
            StartPeriod: 0

  ProdCatalogTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: prodcatalog
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: prodcatalog
          Image: public.ecr.aws/u2g6w7p2/eks-workshop-demo/product_catalog:1.0
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: AGG_APP_URL
              Value: !Sub "http://${ALB.DNSName}:3000/catalogDetail"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:5000/products/ping || exit 1
            Interval: 10
            Timeout: 1
            Retries: 3
            StartPeriod: 0

  ProdDetailTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: proddetail
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ContainerDefinitions:
        - Name: proddetail
          Image: public.ecr.aws/u2g6w7p2/eks-workshop-demo/catalog_detail:1.0
          PortMappings:
            - ContainerPort: 3000
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/ping || exit 1
            Interval: 10
            Timeout: 1
            Retries: 3
            StartPeriod: 0

  # ECS Services
  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - ProdCatalogService
    Properties:
      ServiceName: frontend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 9000
          TargetGroupArn: !Ref ALBTargetGroup

  ProdCatalogService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - ProdDetailService
    Properties:
      ServiceName: prodcatalog-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ProdCatalogTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:
        - ContainerName: prodcatalog
          ContainerPort: 5000
          TargetGroupArn: !Ref ProdCatalogALBTargetGroup

  ProdDetailService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: proddetail-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ProdDetailTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /ping
      Name: ALBTargetGroup
      Port: 9000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  # Security Groups
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Add a new ALB Listener Rule for the Product Catalog service
  ProdCatalogListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: 
            - /products/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ProdCatalogALBTargetGroup

  # Add a new Target Group for the Product Catalog service
  ProdCatalogALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /products/ping
      Name: ProdCatalogALBTargetGroup
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

Outputs:
  ALBDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ALB.DNSName
  
  FrontendServiceURL:
    Description: URL for the Frontend Service
    Value: !Sub "http://${ALB.DNSName}"

  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
